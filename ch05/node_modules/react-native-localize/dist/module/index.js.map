{"version":3,"sources":["index.ts"],"names":["getCalendar","getCountry","getCurrencies","getLocales","getNumberFormatSettings","getTemperatureUnit","getTimeZone","handlers","uses24HourClock","usesAutoDateAndTime","usesAutoTimeZone","usesMetricSystem","logUnknownEvent","type","console","error","addEventListener","handler","has","add","removeEventListener","delete","findBestAvailableLanguage","languageTags","locales","loweredLanguageTags","map","tag","toLowerCase","i","length","currentLocale","languageTag","languageCode","countryCode","isRTL","languageTagIndex","indexOf","partialTagIndex","languageCodeIndex"],"mappings":"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","sourcesContent":["import {\n  getCalendar,\n  getCountry,\n  getCurrencies,\n  getLocales,\n  getNumberFormatSettings,\n  getTemperatureUnit,\n  getTimeZone,\n  handlers,\n  uses24HourClock,\n  usesAutoDateAndTime,\n  usesAutoTimeZone,\n  usesMetricSystem,\n} from \"./module\";\nimport { LocalizationEvent } from \"./types\";\n\nfunction logUnknownEvent(type: string) {\n  console.error(`\\`${type}\\` is not a valid react-native-localize event`);\n}\n\nexport function addEventListener(\n  type: LocalizationEvent,\n  handler: Function,\n): void {\n  if (type !== \"change\") {\n    logUnknownEvent(type);\n  } else if (!handlers.has(handler)) {\n    handlers.add(handler);\n  }\n}\n\nexport function removeEventListener(\n  type: LocalizationEvent,\n  handler: Function,\n): void {\n  if (type !== \"change\") {\n    logUnknownEvent(type);\n  } else if (handlers.has(handler)) {\n    handlers.delete(handler);\n  }\n}\n\nexport function findBestAvailableLanguage<T extends string>(\n  languageTags: ReadonlyArray<T>,\n): { languageTag: T; isRTL: boolean } | undefined {\n  const locales = getLocales();\n  const loweredLanguageTags = languageTags.map((tag) => tag.toLowerCase());\n\n  for (let i = 0; i < locales.length; i++) {\n    const currentLocale = locales[i];\n    const { languageTag, languageCode, countryCode, isRTL } = currentLocale;\n\n    const languageTagIndex = loweredLanguageTags.indexOf(\n      languageTag.toLowerCase(),\n    );\n\n    if (languageTagIndex !== -1) {\n      return { languageTag: languageTags[languageTagIndex], isRTL };\n    }\n\n    const partialTagIndex = loweredLanguageTags.indexOf(\n      (languageCode + \"-\" + countryCode).toLowerCase(),\n    );\n\n    if (partialTagIndex !== -1) {\n      return { languageTag: languageTags[partialTagIndex], isRTL };\n    }\n\n    const languageCodeIndex = loweredLanguageTags.indexOf(\n      languageCode.toLowerCase(),\n    );\n\n    if (languageCodeIndex !== -1) {\n      return { languageTag: languageTags[languageCodeIndex], isRTL };\n    }\n  }\n}\n\nexport {\n  getCalendar,\n  getCountry,\n  getCurrencies,\n  getLocales,\n  getNumberFormatSettings,\n  getTemperatureUnit,\n  getTimeZone,\n  uses24HourClock,\n  usesAutoDateAndTime,\n  usesAutoTimeZone,\n  usesMetricSystem,\n} from \"./module\";\nexport * from \"./types\";\n\nexport default {\n  getCalendar,\n  getCountry,\n  getCurrencies,\n  getLocales,\n  getNumberFormatSettings,\n  getTemperatureUnit,\n  getTimeZone,\n  uses24HourClock,\n  usesAutoDateAndTime,\n  usesAutoTimeZone,\n  usesMetricSystem,\n\n  findBestAvailableLanguage,\n  addEventListener,\n  removeEventListener,\n};\n"]}